内存：
堆区，栈区，常量区，计数区，代码区；
数据类型：
基本数据类型：整形，浮点型，布尔型 boolean 只能返回真假值，字符型；
引用数据类型：类，数组；
基本数据类型——》直接存放到栈区；
引用数据类型——》将引用放到栈区，将内容放到堆区；
全栈工程师：全都会，最牛逼；
数组声明：
int [] a = new int [7]；
 
方法：
修饰符 返回值类型 方法名（参数列表）{
方法体。。。
【return】
}
方法的唯一性：
方法名+参数列表（顺序，个数，类型）；
 
方法的重载：
两同
同一个类
方法名相同
 
一不同
参数列表（顺序，个数，类型）
 
注意
基本数据类型在方法进行之后数据不变
引用数据类型在方法进行之后数据改变
 
工具类已经封装好一些特定的方法：Arrayssort 数组；
排序方法
指定数组升序排序
Arrayssort.sort（**）;
判断两个值是否相等
Arrayssort.equals(***==***);
查找一个数在数组中的位置
Arrayssort.binarySearch(***);该方法必须排序后使用
替换字符串中***=***.replace("**","**")；
可以将字符串转换成新的字符串数组 中间以，隔开
常量可以直接比较，因为地址一样，字符串的比较也要用equals
但是方式不一样 ，可以写为name1.equals(name2)；
 
.length可以表示数组的长度，也可以表示字符串长度 其中字符串要加（）；
 
测试某个字符属于哪一类
function CharMode(iN){
if(iN=48 && iN=57)//数字
return 1;
if(iN=65 && iN=90)//大写字母
return 2;
if(iN=97 && iN+122)//小写字母
return 3;
else//其他符号
return 4;
}
计算一共返回多少个值
function Total(num){
modes=0;
for(i=0;i4;i++){
if(num&1)modes++;
num=1;
}
return modes;
}
将字符转为数组
** = **.toCharArray();
根据上面的我们可以做出一个测试密码强度的小程序：
import java.util.*;
public class Qiangdu{
　　public static void main(String[] args){
　　　　System.out.println("请输入你的密码,为你判断安全度");
　　　　int a=0,b=0,c=0;
　　　　Scanner mima = new Scanner(System.in); //输入
　　　　String z = mima.next(); //将值付给z //将长度付给n
　　　　char[] l = z.toCharArray(); //将字符转化成数组
　　　　for(int i=0;i<z.length();i++){ //进行逐个排查循环
　　　　　　if(l[i]>=48 && l[i]<=57){ //数字
　　　　　　　　a=1;
　　　　　　}else if(l[i]>=65 && l[i]<=90){ //小写字母
　　　　　　　　b=1;
　　　　　　}else if(l[i]>=97 && l[i]<=122){ //大写字母
　　　　　　　　b=1;
　　　　　　}else{ //特殊符号
　　　　　　　　c=1;
　　　　　　}
　　　　}
　　　　System.out.println("查看类型1代表有0代表无\n\n数字"+a+",字母"+b+",符号"+c); //显示类型
　　　　int sum = a+b+c;
　　　　switch(sum){ //密码强度
　　　　　　case 1:System.out.println("安全度：弱");break;
　　　　　　case 2:System.out.println("安全度：中");break;
　　　　　　case 3:System.out.println("安全度：强");break;
　　　　}
　　}
}
